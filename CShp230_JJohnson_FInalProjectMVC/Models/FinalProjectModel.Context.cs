//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CShp230_JJohnson_FInalProjectMVC.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AdvWebDevProjectEntities : DbContext
    {
        public AdvWebDevProjectEntities()
            : base("name=AdvWebDevProjectEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<vClass> vClasses { get; set; }
        public virtual DbSet<vLoginRequest> vLoginRequests { get; set; }
        public virtual DbSet<vStudent> vStudents { get; set; }
    
        public virtual int pDelClasses(Nullable<int> classId)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pDelClasses", classIdParameter);
        }
    
        public virtual int pDelClassStudents(Nullable<int> classId, Nullable<int> studentId)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pDelClassStudents", classIdParameter, studentIdParameter);
        }
    
        public virtual int pDelLoginRequests(Nullable<int> loginId)
        {
            var loginIdParameter = loginId.HasValue ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pDelLoginRequests", loginIdParameter);
        }
    
        public virtual int pDelStudents(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pDelStudents", studentIdParameter);
        }
    
        public virtual int pInsClasses(Nullable<int> classId, string className, Nullable<System.DateTime> classDate, string classDescription)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            var classDateParameter = classDate.HasValue ?
                new ObjectParameter("ClassDate", classDate) :
                new ObjectParameter("ClassDate", typeof(System.DateTime));
    
            var classDescriptionParameter = classDescription != null ?
                new ObjectParameter("ClassDescription", classDescription) :
                new ObjectParameter("ClassDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pInsClasses", classIdParameter, classNameParameter, classDateParameter, classDescriptionParameter);
        }
    
        public virtual int pInsClassStudents(Nullable<int> classId, Nullable<int> studentId)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pInsClassStudents", classIdParameter, studentIdParameter);
        }
    
        public virtual int pInsLoginRequests(ObjectParameter loginID, string name, string emailAddress, string loginName, string newOrReactivate, string reasonForAccess, Nullable<System.DateTime> dateRequiredBy)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var newOrReactivateParameter = newOrReactivate != null ?
                new ObjectParameter("NewOrReactivate", newOrReactivate) :
                new ObjectParameter("NewOrReactivate", typeof(string));
    
            var reasonForAccessParameter = reasonForAccess != null ?
                new ObjectParameter("ReasonForAccess", reasonForAccess) :
                new ObjectParameter("ReasonForAccess", typeof(string));
    
            var dateRequiredByParameter = dateRequiredBy.HasValue ?
                new ObjectParameter("DateRequiredBy", dateRequiredBy) :
                new ObjectParameter("DateRequiredBy", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pInsLoginRequests", loginID, nameParameter, emailAddressParameter, loginNameParameter, newOrReactivateParameter, reasonForAccessParameter, dateRequiredByParameter);
        }
    
        public virtual int pInsStudents(Nullable<int> studentId, string studentName, string studentEmail, string studentLogin, string studentPassword)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var studentNameParameter = studentName != null ?
                new ObjectParameter("StudentName", studentName) :
                new ObjectParameter("StudentName", typeof(string));
    
            var studentEmailParameter = studentEmail != null ?
                new ObjectParameter("StudentEmail", studentEmail) :
                new ObjectParameter("StudentEmail", typeof(string));
    
            var studentLoginParameter = studentLogin != null ?
                new ObjectParameter("StudentLogin", studentLogin) :
                new ObjectParameter("StudentLogin", typeof(string));
    
            var studentPasswordParameter = studentPassword != null ?
                new ObjectParameter("StudentPassword", studentPassword) :
                new ObjectParameter("StudentPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pInsStudents", studentIdParameter, studentNameParameter, studentEmailParameter, studentLoginParameter, studentPasswordParameter);
        }
    
        public virtual ObjectResult<pSelClassesByStudentId_Result> pSelClassesByStudentId(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<pSelClassesByStudentId_Result>("pSelClassesByStudentId", studentIdParameter);
        }
    
        public virtual ObjectResult<pSelClassesByStudents_Result> pSelClassesByStudents()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<pSelClassesByStudents_Result>("pSelClassesByStudents");
        }
    
        public virtual int pSelLoginIdByLoginAndPassword(string studentLogin, string studentPassword, ObjectParameter studentId)
        {
            var studentLoginParameter = studentLogin != null ?
                new ObjectParameter("StudentLogin", studentLogin) :
                new ObjectParameter("StudentLogin", typeof(string));
    
            var studentPasswordParameter = studentPassword != null ?
                new ObjectParameter("StudentPassword", studentPassword) :
                new ObjectParameter("StudentPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pSelLoginIdByLoginAndPassword", studentLoginParameter, studentPasswordParameter, studentId);
        }
    
        public virtual int pUpdClasses(Nullable<int> classId, string className, Nullable<System.DateTime> classDate, string classDescription)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            var classDateParameter = classDate.HasValue ?
                new ObjectParameter("ClassDate", classDate) :
                new ObjectParameter("ClassDate", typeof(System.DateTime));
    
            var classDescriptionParameter = classDescription != null ?
                new ObjectParameter("ClassDescription", classDescription) :
                new ObjectParameter("ClassDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pUpdClasses", classIdParameter, classNameParameter, classDateParameter, classDescriptionParameter);
        }
    
        public virtual int pUpdClassStudents(Nullable<int> originalClassId, Nullable<int> originalStudentId, Nullable<int> newClassId, Nullable<int> newStudentId)
        {
            var originalClassIdParameter = originalClassId.HasValue ?
                new ObjectParameter("OriginalClassId", originalClassId) :
                new ObjectParameter("OriginalClassId", typeof(int));
    
            var originalStudentIdParameter = originalStudentId.HasValue ?
                new ObjectParameter("OriginalStudentId", originalStudentId) :
                new ObjectParameter("OriginalStudentId", typeof(int));
    
            var newClassIdParameter = newClassId.HasValue ?
                new ObjectParameter("NewClassId", newClassId) :
                new ObjectParameter("NewClassId", typeof(int));
    
            var newStudentIdParameter = newStudentId.HasValue ?
                new ObjectParameter("NewStudentId", newStudentId) :
                new ObjectParameter("NewStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pUpdClassStudents", originalClassIdParameter, originalStudentIdParameter, newClassIdParameter, newStudentIdParameter);
        }
    
        public virtual int pUpdLoginRequests(Nullable<int> loginId, string name, string emailAddress, string loginName, string newOrReactivate, string reasonForAccess, Nullable<System.DateTime> dateRequiredBy)
        {
            var loginIdParameter = loginId.HasValue ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var newOrReactivateParameter = newOrReactivate != null ?
                new ObjectParameter("NewOrReactivate", newOrReactivate) :
                new ObjectParameter("NewOrReactivate", typeof(string));
    
            var reasonForAccessParameter = reasonForAccess != null ?
                new ObjectParameter("ReasonForAccess", reasonForAccess) :
                new ObjectParameter("ReasonForAccess", typeof(string));
    
            var dateRequiredByParameter = dateRequiredBy.HasValue ?
                new ObjectParameter("DateRequiredBy", dateRequiredBy) :
                new ObjectParameter("DateRequiredBy", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pUpdLoginRequests", loginIdParameter, nameParameter, emailAddressParameter, loginNameParameter, newOrReactivateParameter, reasonForAccessParameter, dateRequiredByParameter);
        }
    
        public virtual int pUpdStudents(Nullable<int> studentId, string studentName, string studentEmail, string studentLogin, string studentPassword)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var studentNameParameter = studentName != null ?
                new ObjectParameter("StudentName", studentName) :
                new ObjectParameter("StudentName", typeof(string));
    
            var studentEmailParameter = studentEmail != null ?
                new ObjectParameter("StudentEmail", studentEmail) :
                new ObjectParameter("StudentEmail", typeof(string));
    
            var studentLoginParameter = studentLogin != null ?
                new ObjectParameter("StudentLogin", studentLogin) :
                new ObjectParameter("StudentLogin", typeof(string));
    
            var studentPasswordParameter = studentPassword != null ?
                new ObjectParameter("StudentPassword", studentPassword) :
                new ObjectParameter("StudentPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pUpdStudents", studentIdParameter, studentNameParameter, studentEmailParameter, studentLoginParameter, studentPasswordParameter);
        }
    }
}
